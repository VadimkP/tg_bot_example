from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from create_bot import bot, dp
from db import sqlite_db
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from keyboards import navigation_kb
from handlers import order


urlContacts = InlineKeyboardMarkup(row_width=1)
urlInsta = InlineKeyboardButton(text='–ò–Ω—Å—Ç–∞–≥—Ä–∞–º', url='https://www.instagram.com/altay_honey__/')
urlTg = InlineKeyboardButton(text='–¢–µ–ª–µ–≥—Ä–∞–º –ö–∞–Ω–∞–ª', url='https://t.me/altay_honey_spb')
urlContacts.add(urlInsta, urlTg)


async def start_handler(message: types.Message):
    await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üåª\n\n'
                                                 '‚Äî —É –Ω–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è —Ç–æ–Ω–∫–∏–º –≤–∫—É—Å–æ–º –∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π '
                                                 '–Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º—ë–¥–∞ —Å –∞–ª—Ç–∞–π—Å–∫–∏—Ö –ø–æ–ª–µ–π –ø–æ–¥ —á–∞—à–µ—á–∫—É —Ç—Ä–∞–≤—è–Ω–æ–≥–æ —á–∞—è üçÉ')
    try:
        await sqlite_db.users_stats(message.from_user.id, message.from_user.full_name)
    except:
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ users!')


async def menu(message: types.Message):
    await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—é, —á—Ç–æ –≤–∞–º –ø–æ –¥—É—à–µ üòâ',
                           reply_markup=navigation_kb.button_case_menu)


async def add_to_cart(callback_query: types.CallbackQuery):
    await sqlite_db.sql_add_cart(callback_query.data.replace('–î–æ–±–∞–≤–∏—Ç—å ', ''), callback_query.message.chat.id)
    await callback_query.answer(text=f'{callback_query.data.replace("–î–æ–±–∞–≤–∏—Ç—å ", "")} –¥–æ–±–∞–≤–ª–µ–Ω–æ.', show_alert=True)


async def submenu_honey(message: types.Message):
    honey = await sqlite_db.sql_read_honey()
    for hon in honey:
        await bot.send_photo(message.from_user.id, hon[0], f'<b>{hon[2]}</b>\n\n{hon[3]}\n\n<b>–¶–µ–Ω–∞:</b>\n{hon[-1]}',
                             parse_mode="HTML", reply_markup=InlineKeyboardMarkup()
                             .add(InlineKeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {hon[2]}',
                                                       callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {hon[2]}')))


async def submenu_honeycomb(message: types.Message):
    honeycomb = await sqlite_db.sql_read_honeycomb()
    for honc in honeycomb:
        await bot.send_photo(message.from_user.id, honc[0],
                             f'<b>{honc[2]}</b>\n\n{honc[3]}\n\n<b>–¶–µ–Ω–∞:</b>\n{honc[-1]}',
                             parse_mode="HTML", reply_markup=InlineKeyboardMarkup()
                             .add(InlineKeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {honc[2]}',
                                                       callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {honc[2]}')))


async def submenu_tea(message: types.Message):
    tea = await sqlite_db.sql_read_tea()
    for t in tea:
        await bot.send_photo(message.from_user.id, t[0], f'<b>{t[2]}</b>\n\n{t[3]}\n\n<b>–¶–µ–Ω–∞:</b>\n{t[-1]}',
                             parse_mode="HTML", reply_markup=InlineKeyboardMarkup()
                             .add(InlineKeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {t[2]}',
                                                       callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {t[2]}')))


async def submenu_tableware(message: types.Message):
    tablew = await sqlite_db.sql_read_tableware()
    for tw in tablew:
        await bot.send_photo(message.from_user.id, tw[0], f'<b>{tw[2]}</b>\n\n{tw[3]}\n\n<b>–¶–µ–Ω–∞:</b>\n{tw[-1]}',
                             parse_mode="HTML", reply_markup=InlineKeyboardMarkup()
                             .add(InlineKeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {tw[2]}',
                                                       callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {tw[2]}')))


async def submenu_other(message: types.Message):
    other = await sqlite_db.sql_read_other()
    for oth in other:
        await bot.send_photo(message.from_user.id, oth[0], f'<b>{oth[2]}</b>\n{oth[3]}\n\n<b>–¶–µ–Ω–∞:</b>{oth[-1]}',
                             parse_mode="HTML", reply_markup=InlineKeyboardMarkup()
                             .add(InlineKeyboardButton(text=f'–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {oth[2]}',
                                                       callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {oth[2]}')))


async def del_one_pos_from_cart(callback_query: types.CallbackQuery):
    await sqlite_db.sql_del_one_pos_from_cart(callback_query.data.replace('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ', ''),
                                              callback_query.message.chat.id)
    await callback_query.answer(text=f'{callback_query.data.replace("–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ", "")} —É–¥–∞–ª–µ–Ω–æ.',
                                show_alert=True)


async def del_all_cart(callback_query: types.CallbackQuery):
    await sqlite_db.sql_del_all_user_cart(callback_query.message.chat.id)
    await callback_query.answer(text=f'–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', show_alert=True)


async def confirm_order(callback_query: types.CallbackQuery):
    f = await sqlite_db.sql_read_cart(callback_query.message.chat.id)
    if not f:
        await callback_query.answer(text=f'–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞', show_alert=True)
    else:
        try:
            await order.order_run(callback_query.message.chat.id)
        except:
            await callback_query.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
            print(f"–û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.message.chat.full_name}")
        # print(callback_query.message.chat.id)


async def submenu_cart(message: types.Message):
    cart = await sqlite_db.sql_read_cart(message.from_user.id)
    i = 0
    for ct in cart:
        i += 1
        await bot.send_message(message.from_user.id, f'{i}. {ct[0]}\n–¶–µ–Ω–∞: {ct[1]}\n\n',
                               reply_markup=InlineKeyboardMarkup().
                               add(InlineKeyboardButton(text=f'–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã {ct[0]} ?',
                                                        callback_data=f'–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã {ct[0]}')))
    await bot.send_message(message.from_user.id, f'–ò—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ—Ä–∑–∏–Ω–µ: {i}\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑".'
                                                 f'\n–ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç —É –≤–∞—Å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω, –∏–º—è –∏ '
                                                 f'–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏',
                           reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton(text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
                                                                                        callback_data=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')).
                           add(InlineKeyboardButton(text=f'–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É',
                                                    callback_data=f'–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É')))


async def about_us(message: types.Message):
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç üåª'
                                                 '\n\n–ú—ã ‚Äì –ê–Ω—è, –ú–∞–∫—Å–∏–º –∏ –ê–ª–∏—Å–∞ ‚Äì –ø—Ä–∏–µ—Ö–∞–ª–∏ —Å –ê–ª—Ç–∞—è –∏ –ø—Ä–∏–≤–µ–∑–ª–∏ —Å —Å–æ–±–æ–π –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –º—ë–¥. '
                                                 '\n\n<i>–°–µ–π—á–∞—Å –º—ã –Ω–∞ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞—à–µ–≥–æ –º–µ–¥–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è'
                                                 '–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ –∫–∞—á–µ—Å—Ç–≤–µ. –≠—Ç–æ –Ω–µ –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –Ω–æ –º—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è</i> üêù'
                                                 '\n\n–ï—Å–ª–∏ –í—ã —É–∂–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∫ –Ω–∞–º, —Ç–æ –æ–±—â–∞–ª–∏—Å—å —Å–æ –º–Ω–æ–π, —Å –ê–Ω–µ–π üëãüèª'
                                                 '‚Äì —è –≤–µ–¥—É –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–æ—Ü.—Å–µ—Ç—è—Ö; —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞—é –º—ë–¥ –ø–æ –±–∞–Ω–æ—á–∫–∞–º, –∞ —Ç—Ä–∞–≤—ã –ø–æ –ø–∞–∫–µ—Ç–∏–∫–∞–º; '
                                                 '–ø—Ä–∏–Ω–∏–º–∞—é –∑–∞–∫–∞–∑—ã –∏ –ø–æ–º–æ–≥–∞—é –í–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤—ã–±–æ—Ä–æ–º üíõ'
                                                 '\n–ú–∞–∫—Å–∏–º –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å –Ω–∞—à–µ–≥–æ –¥–µ–ª–∞: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ—Å—Ç–∞–≤–∫–∏ –º—ë–¥–∞'
                                                 ' –∏ —Ä–∞–∑–≤–æ–∑–∏—Ç –í–∞—à–∏ –∑–∞–∫–∞–∑—ã.'
                                                 '\n–ê –ê–ª–∏—Å–∞ ‚Äì –Ω–∞—à–∞ –º–∞–ª–µ–Ω—å–∫–∞—è –¥–æ—á—å, —á—å—ë —Ä–æ–∂–¥–µ–Ω–∏–µ —Å–ø–æ–¥–≤–∏–≥–ª–æ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —ç—Ç–æ–≥–æ'
                                                 ' –º–µ–¥–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ üçØ'
                                                 '\n\n<b>–û—Ç–∫—É–¥–∞ –º—ã –±–µ—Ä—ë–º –º—ë–¥?</b>'
                                                 '\n–Ø –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞?'
                                                 '\n–ú—ã –Ω–∞—á–∏–Ω–∞–ª–∏ —Å–æ —Å–∫—Ä–æ–º–Ω—ã—Ö –æ–±—ä—ë–º–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞—Å–µ–∫–∏. –ê —Ç–µ–ø–µ—Ä—å –ø–æ–∫—É–ø–∞–µ–º –µ–≥–æ '
                                                 '—É –Ω–∞—à–∏—Ö –¥–æ–±—Ä—ã—Ö –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω–∏–º–∞—é—Ç—Å—è —ç—Ç–∏–º –≤—Å—é —Å–≤–æ—é –∂–∏–∑–Ω—å'
                                                 '\nüíõ –ú—ã –≥–æ—Ä–¥–∏–º—Å—è –∫–∞—á–µ—Å—Ç–≤–æ–º –Ω–∞—à–µ–≥–æ –º—ë–¥–∞ –∏ —Å–∫–æ—Ä–æ —Å–º–æ–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ!'
                                                 '\n\n‚ö†Ô∏è –ú—ë–¥ –Ω–µ –ø–æ–¥–≤–µ—Ä–≥–∞–µ—Ç—Å—è —Ç–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–µ –∏ —Ä–∞–∑–±–∞–≤–ª–µ–Ω–∏—é. '
                                                 '–í –Ω–µ–º –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–æ–±–∞–≤–æ–∫ —Ö–∏–º–∏–∏ –∏ –∏–Ω—ã—Ö —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö. 100% –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç.',
                           parse_mode="HTML")


async def contacts(message: types.Message):
    await message.answer('–ù–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã:', reply_markup=urlContacts)


def registration_handlers_navigation(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=['start'])
    dp.register_message_handler(menu, commands=['menu'])
    dp.register_callback_query_handler(add_to_cart, lambda x: x.data and x.data.startswith('–î–æ–±–∞–≤–∏—Ç—å '))
    dp.register_message_handler(submenu_honey, Text(equals="üçØ M—ë–¥", ignore_case=True))
    dp.register_message_handler(submenu_honeycomb, Text(equals="üî∏ –ú–µ–¥–æ–≤—ã–µ —Å–æ—Ç—ã", ignore_case=True))
    dp.register_message_handler(submenu_tea, Text(equals="üçµ –¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π", ignore_case=True))
    dp.register_message_handler(submenu_tableware, Text(equals="üçΩ –ü–æ—Å—É–¥–∞ –∏–∑ –¥–µ—Ä–µ–≤–∞", ignore_case=True))
    dp.register_message_handler(submenu_other, Text(equals="ü§≠ –ö–æ–µ-—á—Ç–æ –µ—â–µ", ignore_case=True))
    dp.register_callback_query_handler(del_one_pos_from_cart, lambda x: x.data and x.data.startswith('–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã '))
    dp.register_callback_query_handler(del_all_cart, lambda x: x.data and x.data.startswith('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É'))
    dp.register_callback_query_handler(confirm_order, lambda x: x.data and x.data.startswith('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'))
    dp.register_message_handler(submenu_cart, Text(equals="üõí –ö–æ—Ä–∑–∏–Ω–∞", ignore_case=True))
    dp.register_message_handler(about_us, commands=['about_us'])
    dp.register_message_handler(contacts, commands=['contacts'])

